#!/bin/bash

# blockade is a program designed managed '/etc/hosts' file.
# Copyright (C) 2020  Michael L. Schaecher

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -e

name="blockade"

current_date=$(date -R)			# Call the date command every blockade
					# is ran.

service_timer="/lib/systemd/system/blockade-host-update.timer"
service_pause_timer="/lib/systemd/system/blockade-hosts-pause-update.timer"

hosts_links=$(cat data/doc/hosts-links)

# Assume that there is no blockade.conf.
if [ ! -f /usr/lib/blockade/blockade.conf ] ; then
	echo "missing - /usr/lib/blockade/blockade.conf"
	# If for some reason the config file is missing, then
	# revert to the default.
	export hosts_name="unified"
	export raw_link="http://sbc.io/hosts/hosts"
	export update_interval="monthly"
	export added_url=""
else
	source /usr/lib/blockade/blockade.conf
fi

# Header for hosts file.
custom_hosts_header=$(cat <<EOF
# Hosts generated by $(hostname)@$(users) on ${current_date}
#
# This hosts file is updated and is sourced from Steven Black hosts
# github page. If you come across any links that you feel should be
# add, feel free to contact me or Mr. Black on github.
#
# https://github.com/mschaecher78/blockade/issues
# or
# https://github.com/StevenBlack/hosts/issues
#
# localhost @ 127.0.0.1
# redirect  @ 0.0.0.0
#

127.0.0.1 localhost
127.0.0.1 localhost.localdomain
127.0.0.1 local
255.255.255.255 broadcasthost
::1 localhost
::1 ip6-localhost
::1 ip6-loopback
fe80::1%lo0 localhost
ff00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
0.0.0.0 0.0.0.0
EOF
)

general_info=$(cat <<EOF
${name} - version ${version}
EOF
)

general_usage=$(cat <<EOF
${general_info}

usage: ${name} [command]
usage: ${name} [command] "argument"
usage: ${name} [command] <option> "argument"

command
	edit "website..."		Manually add website url: more then one can be added separating
					each one by a space.

	interval <option> "date..."	Set how offend blockade updates the hosts file. This command requires
					an option that determines what type of date format.

	name "name..."			What hosts configuration to use.

	pause <option> "date..."	Set how long to pause blockade /etc/hosts management. Max limit is 12 hours
					or 720 minutes.

	refresh				Manual update hosts file.

	help				Show the help dialog.

	version 			Show version info.

option
	-l 				List of available hosts configurations.

	-c				Use the common systemctl timer options daily, weekly or monthly.

	-t				Set specific date and/time for blockade to update hosts. For more detail
					run "$(tput bold)man systemd.time$(tput sgr0)."

	-h 				Pause limit in hours.

	-m 				Pause limit in minutes.

blockade homepage: <https://www.github.com/mschaecher78/blockade/>
Copyright (C) 2020 <Michael L. Schaecher> GPL v3
EOF
)

hosts_name_list=$(cat <<EOF
${general_info}

$(cat data/doc/hosts-list)
EOF
)

errors=$(cat <<EOF
'blockade' - unknown command or option give!
EOF
)

function CheckRoot () {

# Only check for root when need be.
if [ "${EUID}" -gt "0" ] ; then
	echo "'blockade' - root access required for this command & option!"
	exit 1
fi

}

function RebuildConfig () {

# This should be very simple.
export build_conf=$(cat <<EOF
# This config file was auto generator, do not edit directly.

export hosts_name="${hosts_name}"
export raw_link="${raw_link}"
export update_interval="${update_interval}"
export added_url="${added_url}"
EOF
)

# Show error if for some reason the config file could not be rebuilt.
if ! echo "${build_conf}" > /usr/lib/blockade/blockade.conf ; then
	echo "'blockade' - unable to rebuild config file!"
	exit 1
fi

}

function RebuildTimer () {

# Rebuild the config file.
RebuildConfig

# Rebuild the systemctl timer scripts.
systemctl_timer=$(cat <<EOF >
[Unit]
Description=Update your hosts file without having to worry

[Timer]
Unit=blockade-hosts-update.service
OnCalendar=${update_interval}
RandomizedDelaySec=15m
Persistent=true

[Install]
WantedBy=timers.target
EOF
)

if ! echo "${systemctl_timer}" > ${service_timer} ; then
	echo "'blockade' - unable to rebuild 'blockade-host-update.timer'"
	exit 1
else

	if systemctl enable blockade-hosts-update.timer || true ; then
		echo "Reloading systemd daemons."

		# This prevents the warning about The unit configuration file or drop-ins
		# being changed.
		if ! systemctl daemon-reload ; then
			echo "'blockade' - unable to reload systemd daemons!"
			exit 1
		fi

	else
		systemctl enable blockade-hosts-update.timer
		echo "'blockade' - failed to restart service!"
		exit 1
	fi

fi

}

function RefreshBlockade () {

new_hosts=$(cat <<EOF
${custom_hosts_header}

# Start unwanted ${hosts_name} websites and urls.
EOF
)

# Only use the redirects websites not the hosts file header.
if ! wget -O - -cq  ${raw_link} | awk 'NR < 40{next}1' | grep '0.0.0.0' > /tmp/hosts ; then
	echo "${errors}" && exit 1
else
	# Remove the example.
	tmp_hosts=$(cat /tmp/hosts | head -n -1) && rm -f /tmp/hosts
fi

cat <<EOF > /etc/hosts
${new_hosts}
${tmp_hosts}

# User add websites and urls.
EOF

# If there any websites that the user has added, then now is the
# time to add them to the hosts file, otherwise skip.
if [ "${added_url}" ] ; then

	while read -r line ; do
		echo "0.0.0.0 ${line}" >> /etc/hosts
	done < <(echo "${added_url}")

fi

sleep 0.5 && echo "Install: ${hosts_name} /etc/hosts file."

if systemctl restart NetworkManager.service ; then
	sleep 7 && echo "Finished :)"

	if systemctl disable blockade-hosts-pause-update.timer || true ; then
		rm -f ${service_pause_timer}
	fi

else
	echo "${errors}" && exit 1
fi

}

function PauseBlockade () {

systemctl_pause_timer=$(cat <<EOF
[Unit]
Description=Update your hosts file without having to worry

[Timer]
Unit=blockade-hosts-update.service
OnCalendar=${pause_timer}
RandomizedDelaySec=15m
Persistent=true

[Install]
WantedBy=timers.target
EOF
)

if ! echo "${systemctl_pause_timer}" > ${service_pause_timer} ; then
	echo "'blockade' - unable to rebuild 'blockade-hosts-pause-update.timer'"
	exit 1
else
	echo "${custom_hosts_header}" > /etc/hosts

	if which systemctl >/dev/null 2>&1 ; then
            systemctl start blockade-hosts-pause-update.timer || true
	    systemctl daemon-reload
        fi

fi

}

# getopt is over kill since a while loop does the same thing here.
while true ; do case "${1}" in
	edit)
		CheckRoot && shift 1

		# Convert spacing into newline and keep what was previously added.
		if [ ! "${added_url}" ] ; then
			export added_url="$(echo "${1}" | tr [:space:] '\n')"
		else
			export added_url="$(echo "${added_url} ${1}" | tr [:space:] '\n')"
		fi

		# Rebuild the config file and update the hosts file.
		RebuildConfig && RefreshBlockade exit 0
	;;
	interval)
		CheckRoot && shift 1

		case "${1}" in
			-c)
				shift 1

				if [[ "${1}" =~ ^(daily|weekly|monthly|yearly)$ ]] ; then
					export update_interval="${1}"
				else
					echo "${errors}" && exit 1
				fi

			;;
			-t)
				export update_interval="${1}"
			;;
			*)
				echo "${errors}" && exit 1
			;;
		esac

		RebuildConfig && RefreshBlockade && break
	;;
	name)
		shift 1

		export hosts_name="${1}"

		# Garb the name and try to find the main link.
		if [ ! "${1}" ] ; then
			echo "'blockade' - invalid or missing name!"
			exit 1
		elif [ "${1}" == "-l" ] ; then
			echo "${hosts_name_list}" && break
		else

			CheckRoot

			if [ "${1}" == "unified" ] ; then
				export raw_link="http://sbc.io/hosts/hosts"
			else
				export raw_link=$(echo "${hosts_links}" | grep "/alternates/${1}/hosts")

				if [ ! "${raw_link}" ] ; then
					echo "${errors}" && exit 1
				fi

			fi

			echo "${raw_link}"

		fi

		RebuildConfig && RefreshBlockade && break
	;;
	pause)
		CheckRoot

		shift 1 && export pause_option="${1}"
		shift 1 && export pause_timer="${1}"

		if [ "${pause_option}" == "-h" ] ; then

			if (("${pause_timer}" >= "1" && "${pause_timer}" <= "12")) ; then
				export pause_timer=$(date --date="${pause_timer} hours" +"%Y-%m-%d %H:%M ")
			else
				echo "'blockade' - pause timer must be between 1 - 12 hours."
				exit 1
			fi

		elif [ "${pause_option}" == "-m" ] ; then

			if (("${pause_timer}" >= "1" && "${pause_timer}" <= "720")) ; then
				export pause_timer=$(date --date="${pause_timer} minutes" +"%Y-%m-%d %H:%M")
			else
				echo "'blockade' - pause timer must be between 60 - 720 minutes."
				exit 1
			fi

		else
			echo "${errors}" && exit 1
		fi

		PauseBlockade && break
	;;
	refresh)
		CheckRoot && RefreshBlockade && break
	;;
	help)
		echo "${general_usage}" && break
	;;
	version)
		echo "${general_info}" && break
	;;
	*|"")
		echo "${errors}" && exit 1
	;;
esac done

exit 0
