#!/bin/bash

# Blockade; a program that updates the hosts file automaticaly.
# Copyright (C) 2020  Michael L. Schaecher

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

set -e


HOST="/usr/share/blockade/hosts"		# List of links.
NAME="/usr/share/blockade/name"			# What type of hosts file to use.
LINK="/usr/share/blockade/link"			# Where to grab the hosts.

# Use systemctl --list-timers to to show when the hosts file was
# last updated.
LAST=$(systemctl list-timers --all | grep 'blockade' | awk -F' ' '{print $8,$9,$10}')
if [ "${LAST}" == "" ] ; then
	LAST="n/a"
fi

# Show the status of blockade.
STATUS=$(systemctl status blockade-hosts-update.timer | awk -F' ' 'NR==3 {print $2,$3}')

DATE=$(date -R)					# Get the UTC date anytime this script is called.

# Usage for blockade.
USAGE="blockade ${VERSION} (hosts)
Useage = blockade [option]

    --update			Installs new hosts file based on what the has be set by the system
				admin. This can be done manual.
    --interval=date		How offend to update (systemd required). See man page for details.
    --type			Displays a list of avialible hosts file.
    --info			Display the hosts file type, download link and last time /etc/hosts
				was update.
    --help			Show these quick tips.
    --version			Displays program name and version.

blockade homepage: <https://www.github.com/mschaecher78/blockade/>
Copyright (C) 2020 <Michael L. Schaecher> GPL v2
"
# Start of /etc/hosts file header
HEADER="# Hosts generated by $(hostname)@$(users) on ${DATE}
#
# Type: $(cat /usr/share/blockade/name)
#
# This hosts file is updated and is sourced from Steven Black hosts
# github page. If you come accross any links that you feel should be
# add, feel free to contact me or Mr. Black on github.
#
# https://github.com/mschaecher78/blockade/issues
# or
# https://github.com/StevenBlack/hosts/issues
#
# localhost @ 127.0.0.1
# redirect  @ 0.0.0.0
#

127.0.0.1 localhost
127.0.0.1 localhost.localdomain
127.0.0.1 local
255.255.255.255 broadcasthost
::1 localhost
::1 ip6-localhost
::1 ip6-loopback
fe80::1%lo0 localhost
ff00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
0.0.0.0 0.0.0.0

# Place website's below that you wish to block.
"
# End of /etc/hosts file header

INFO="blockade - version ${VERSION}

Host:   /etc/hosts
Type:   $(cat ${NAME})
Status: ${STATUS}
date:   ${LAST}
"

set_interval () {

if echo "${DATE}" > interval ; then
	echo "Setting: update interval ${DATE}"
fi

# Disable the timer service to prevent error.
if ! which systemctl >/dev/null 2>&1 ; then
	systemctl disable blockade-hosts-update.timer
	echo "Error: failed to restart service!"
	exit 1
else
	echo "Disabling: blockade-hosts-update.timer"
fi

# Rewrite the systemctl scripts.
cat <<EOF > /lib/systemd/system/blockade-hosts-update.service
[Unit]
Description=Update your hosts file without having to worry

[Service]
Type=oneshot
ExecStart=/usr/bin/blockade --update

[Install]
WantedBy=multi-user.target
EOF

cat <<EOF > /lib/systemd/system/blockade-hosts-update.timer
[Unit]
Description=Update your hosts file without having to worry

[Timer]
Unit=blockade-hosts-update.service
OnCalendar=${WHEN}
RandomizedDelaySec=15m
Persistent=true

[Install]
WantedBy=timers.target
EOF

# Restart service
if ! which systemctl >/dev/null 2>&1 ; then
	systemctl enable blockade-hosts-update.timer
	echo "Error: failed to restart service!"
	exit 1
else
	echo "Enabling: blockade-hosts-update.timer"

	# This prevents the warning about The unit configuration file or drop-ins
	# being changed.
	if ! systemctl daemon-reload ; then
		echo "Error: unable to reload systemd daemons!"
		exit 1
	else
		echo "Reload systemd deamons."
	fi

fi

}

set_type () {

read -p "List of avialable hosts files from Steven Black

	1)	unified
	2)	unified-fakenews
	3)	unified-gambling
	4)	unified-porn
	5)	unified-social
	6)	unified-fakenews-gambling
	7)	unified-fakenews-porn
	8)	unified-fakenews-social
	9)	unified-gambling-porn
	10)	unified-gambling-social
	11)	unified-porn-social
	12)	unified-fakenews-gambling-porn
	13)	unified-fakenews-gambling-social
	14)	unified-fakenews-porn-porn
	15)	unified-gambling-porn-social
	16)	unified-fakenews-gambling-porn-social

Enter option: " CHOISE

case ${CHOISE} in
	[0-9]|10|11|12|13|14|15|16)
		GET_LINK=$(cat ${HOST} | awk "NR==${CHOISE} {print}")

		if [ "${CHOISE}" == "1" ] ; then
			SET_NAME="unified"
		else
			SET_NAME=$(echo "${GET_LINK}" | awk -F"/" '{print $6}')
		fi

		echo "Hosts: ${SET_NAME}"
		echo "Link:  ${GET_LINK}"
		echo "${GET_LINK}" > /usr/share/blockade/link
		echo "${SET_NAME}" > /usr/share/blockade/name
	;;
	*)	echo "'${CHOISE}' Unknow options!" && exit 1 ;;
esac

exit 0

}

GETOPT=$(getopt -n blockade -o '' -l 'update,help,version,type,info,interval:' -- $@)

eval set -- "${GETOPT}"

if [ "${EUID}" -ne 0 ] ; then

	# Some options don't require root.
	if [ "${1}" == "--help" ] ; then
		echo "${USAGE}"
	elif [ "${1}" == "--version" ] ; then
		echo "blockade ${VERSION}"
	else
		echo "blockade requires root access!"
	fi

elif [ "${EUID}" -ne 1 ] ; then

	while true ; do

		case "${1}" in
			--update)
				# Error if file is empty or doesn't exist, but fallback
				# to the default hosts file and exit.
				if [ "${LINK}" == "" ] ; then

					if ! echo "${HEADER}" > /etc/hosts ; then
						echo "Error: failed to install /etc/hosts header"
					else
						echo "Error: ${LINK} is empty or missing fallingback to default!"
						echo "	Run \"sudo blockade --type=\" to fix this."
					fi

					exit 1
				fi

				echo "Building new hosts file"
				# Normally EOF would be used to push the header to the
				# file, but it doesn't like whitespace.
				if ! echo "${HEADER}" > /etc/hosts ; then
					echo "Error: failed to install /etc/hosts header"
					exit 1
				fi

				sleep 0.5 # Allow time for the user to see what is going on.

				echo "Downloading: $(cat ${LINK})"
				# Download the selected hosts. Exit if there is an error.
				if ! wget -O - -cq  $(cat ${LINK}) | awk 'NR < 40{next}1' |
				grep '0.0.0.0' >> /etc/hosts ; then
					echo "Error: unable to update hosts"
					exit 1
				else
					sleep 0.5
					echo "Install: $(cat ${NAME}) /etc/hosts file."
					# Restart NetworkManager.
					if systemctl restart NetworkManager.service ; then
						sleep 7 && echo "Finished :)"

					else
						echo "Error: failed to restart NetworkManager!"
						exit 1
					fi
				fi

				echo "$(date -R)" > /usr/share/blockade/updated

				exit 0
			;;
			--interval) shift && WHEN="${1}" && set_interval ;;
			--type) shift && TYPE="${1}" && set_type ;;
			--help) echo "${USAGE}" ;;
			--version) echo "blockade ${VERSION}" ;;
			--info)
				echo "${INFO}"
				exit 0 ;;
			--) shift && break ;;
		esac && shift

	done
fi
