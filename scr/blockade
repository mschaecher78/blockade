#!/bin/bash

# Blockade; a program that updates the hosts file automatically.
# Copyright (C) 2020  Michael L. Schaecher

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

function missing_config () {

echo "Missing /usr/lib/blockade/blockade.config"

# Create directory if missing for some reason.
if [ ! -d /usr/lib/blockade ] ; then
	mkdir -p /usr/lib/blockade
fi

echo "Reverting to default configuration"

cat <<EOF > ${CONFIG}
# This file is generated and updated by blockade, see the
# manpage for more details.

# Link to download hosts file.
export LINK="http://sbc.io/hosts/hosts"
# Name/type of hosts file (Unified is the default).
export NAME="Unified"
# How offend to update the /etc/hosts, (default is monthly).
export INTERVAL="monthly"
EOF

blockade --info
exit 1

}

function set_interval () {

if sed "s/export INTERVAL=\"${INTERVAL}\"/export INTERVAL=\"${WHEN}\"/g" \
${CONFIG} > /tmp/blockade.conf.tmp ; then

	echo "setting update to ${WHEN}"
	mv -f /tmp/blockade.conf.tmp ${CONFIG}
	# Since blockade's configuration was rewritten the file's permissions
	# need to be fixed.
	chmod 0755 ${CONFIG}

	# Disable the timer service to prevent error.
	if ! which systemctl >/dev/null 2>&1 ; then
		systemctl disable blockade-hosts-update.timer
		echo "Error: failed to restart service!"
		exit 1
	else
		echo "Disabling: blockade-hosts-update.timer"
	fi

else
	echo "Error: unable to update interval!"
	exit 1
fi

cat <<EOF > /lib/systemd/system/blockade-hosts-update.timer
[Unit]
Description=Update your hosts file without having to worry

[Timer]
Unit=blockade-hosts-update.service
OnCalendar=${WHEN}
RandomizedDelaySec=15m
Persistent=true

[Install]
WantedBy=timers.target
EOF

# Restart service
if ! which systemctl >/dev/null 2>&1 ; then
	systemctl enable blockade-hosts-update.timer
	echo "Error: failed to restart service!"
	exit 1
else
	echo "Enabling: blockade-hosts-update.timer"

	# This prevents the warning about The unit configuration file or drop-ins
	# being changed.
	if ! systemctl daemon-reload ; then
		echo "Error: unable to reload systemd daemons!"
		exit 1
	else
		echo "Reload systemd daemons."
	fi

fi

}

function set_type () {

# /usr/share/blockade/type-info is used for available hosts and to generate
# new blockade.conf file.
read -p "List of available hosts configuration.

$(cat ${HOST} | awk -F';' '{print $1,"\t"$2}')

Choose option [ press enter to keep \"${NAME}\" ]: " CH00SE

case ${CH00SE} in
	[0-9]|10|11|12|13|14|15|16)

		# Need to capture the selected choice and print into a temporary file.
		cat ${HOST} | awk "NR==${CH00SE} {print}" > /tmp/blockade-type.txt

		# Set variable for the new name.
		GET_NAME=$(cat /tmp/blockade-type.txt | awk -F';' '{print $2}')
		GET_LINK=$(cat /tmp/blockade-type.txt | awk -F';' '{print $3}')

		echo "Setting name to \"${GET_NAME}\""
		sed "s/\"${NAME}\"/\"${GET_NAME}\"/g" ${CONFIG} > /tmp/blockade.conf.tmp

		echo "Setting name to \"${GET_LINK}\""

		if sed "s+${LINK}+${GET_LINK}+g" /tmp/blockade.conf.tmp > ${CONFIG} ; then
			rm -f /tmp/blockade*
			exit 0
		else
			echo "Error: unable to update configuration!"
			exit 1
		fi


	;;
	*) echo "'${CHOOSE}' Unknown options!" && exit 1 ;;
	"") echo "Doing nothing!" && exit 0 ;;
esac

exit 0

}

function show_info () {
echo "blockade - version ${VERSION}

Host:   /etc/hosts
Type:   ${NAME}
Link:	${LINK}
Status: ${STATUS}
Update: ${LAST}
"
}

function update_hosts () {
cat <<EOF > /etc/hosts
# Hosts generated by $(hostname)@$(users) on ${DATE}
#
# Type: ${NAME}
#
# This hosts file is updated and is sourced from Steven Black hosts
# github page. If you come across any links that you feel should be
# add, feel free to contact me or Mr. Black on github.
#
# https://github.com/mschaecher78/blockade/issues
# or
# https://github.com/StevenBlack/hosts/issues
#
# localhost @ 127.0.0.1
# redirect  @ 0.0.0.0
#

127.0.0.1 localhost
127.0.0.1 localhost.localdomain
127.0.0.1 local
255.255.255.255 broadcasthost
::1 localhost
::1 ip6-localhost
::1 ip6-loopback
fe80::1%lo0 localhost
ff00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
0.0.0.0 0.0.0.0

# Begin ${NAME}.
EOF

sleep 0.5	# Allow time for the user to see what is going on.

echo "Downloading: ${LINK}"
# Download the selected hosts. Exit if there is an error.
if ! wget -O - -cq  ${LINK} | awk 'NR < 40{next}1' | grep '0.0.0.0' >> /etc/hosts ; then
	echo "Error: unable to update hosts" && exit 1
else
	sleep 0.5 && echo "Install: ${NAME} /etc/hosts file."

	if [ -f ${CUSTOM_LINKS} ] ; then
		cat ${CUSTOM_LINKS} >> /etc/hosts
	fi

	# Restart NetworkManager.
	if systemctl restart NetworkManager.service ; then
		sleep 7 && echo "Finished :)" && exit 0
	else
		echo "Error: failed to restart NetworkManager!" && exit 1
	fi
fi

}

set -e


HOST="/usr/share/blockade/type-info"		# Name/type url download link.

# Show the status of blockade and when last updated, grabbing the info from `systemctl status.`
STATUS=$(systemctl status blockade-hosts-update.timer | awk -F' ' 'NR==3 {print $2,$3}')
if [ "${STATUS}" == "" ] || [ "${STATUS}" == "inactive (dead)" ] ; then
	STATUS="dead"
fi

LAST=$(systemctl status blockade-hosts-update.timer | awk -F' '  'NR==3 {print $5,$6,$7}')
if [ "${LAST}" == "" ] ; then
	LAST="n/a"
fi

DATE=$(date -R)					# Get the UTC date anytime this script is called,
						# but only use if updating the hosts file.

CONFIG="/usr/lib/blockade/blockade.conf"	# Configuration file, this is needed.

# Don't let there be a missing config file and if need be revert back
# to the default configuration.
if [ ! -f ${CONFIG} ] ; then missing_config ; fi
source  ${CONFIG}				# Source the configuration file.

# File use if custom links are add.
CUSTOM_LINKS="/lib/blockade/user-added-links"

# Usage for blockade.
USAGE="blockade ${VERSION} (hosts)
Usage = blockade [option]

    --edit			Manually edit /etc/hosts file.
    --update			Installs new hosts file based on what the has be set by the system
				admin. This can be done manual.
    --interval=date		How offend to update (systemd required). See man page for details.
    --type			Displays a list of available hosts file.
    --info			Display the hosts file type, download link and last time /etc/hosts
				was update.
    --help			Show these quick tips.
    --version			Displays program name and version.

blockade homepage: <https://www.github.com/mschaecher78/blockade/>
Copyright (C) 2020 <Michael L. Schaecher> GPL v2
"

GETOPT=$(getopt -n blockade -o '' -l 'update,help,version,type,info,edit:,interval:' -- $@)

eval set -- "${GETOPT}"

if [ "${EUID}" -ne 0 ] ; then

	# Some options don't require root.
	if [ "${1}" == "--help" ] ; then
		echo "${USAGE}"
	elif [ "${1}" == "--version" ] ; then
		echo "blockade ${VERSION}"
	elif [ "${1}" == "--info" ] ; then
		show_info
	else
		echo "blockade requires root access!"
	fi

elif [ "${EUID}" -ne 1 ] ; then

	while true ; do

		if [ ! -f ${CONFIG} ] ; then missing_config ; fi


		case "${1}" in
			--update) update_hosts;;
			--interval) shift && WHEN="${1}" && set_interval ;;
			--type) set_type ;;
			--help) echo "${USAGE}" ;;
			--version) echo "blockade ${VERSION}" ;;
			--info) show_info;;
			--edit)
				shift && echo "Adding: ${1} to /etc/hosts"

				# Create a backup file so that when the hosts is
				# updated then links that was add by the user doesn't
				# have to be reenter.
				#
				# The update should be painless.
				echo "${1}" >> /lib/blockade/user-added-links

				if cat ${CUSTOM_LINKS} >> /etc/hosts ; then
					exit 0
				else
					echo "Error: failed to edit /etc/hosts"
					exit 1
				fi

			;;
			--) shift && break ;;
		esac && shift

	done
fi
